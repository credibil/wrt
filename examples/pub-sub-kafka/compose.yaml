name: pub-sub-kafka

secrets:
  credibil:
    environment: CARGO_REGISTRIES_CREDIBIL_TOKEN

services:
  # pubsub:
  #   image: pub-sub-kafka:latest
  #   container_name: pub-sub-kafka
  #   env_file: ../../.env
  #   build:
  #     context: ../..
  #     dockerfile: Dockerfile
  #     secrets:
  #       - credibil
  #     args:
  #       BIN: realtime
  #   volumes:
  #      - ../../target/wasm32-wasip2/release/examples/pub_sub_kafka.wasm:/app.wasm
  #   ports:
  #     - 8080:8080
  #   depends_on:
  #     init-kafka:
  #       condition: service_started
  #     otelcol:
  #       condition: service_started
  #     redis:
  #       condition: service_started

  # otelcol:
  #   image: otel/opentelemetry-collector-contrib:latest
  #   volumes:
  #     - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
  #   ports:
  #     - 4317:4317
  #     - 4318:4318
  #   depends_on:
  #     - jaeger
  #     - prometheus
      
  # jaeger:
  #   image: jaegertracing/jaeger:latest
  #   ports:
  #     - 16686:16686

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - 9090:9090 
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - --config.file=/etc/prometheus/prometheus.yml
  #     - --storage.tsdb.path=/prometheus
  #     - --web.enable-remote-write-receiver
  #     # - --log.level=debug

  init-kafka:
    image: apache/kafka:latest
    container_name: init-kafka
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      sh -c '
        echo "Creating topic a.v1...";
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic a.v1 --partitions 1 --replication-factor 1;
        echo "Creating topic b.v1...";
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic b.v1 --partitions 1 --replication-factor 1;
        echo "Configured topics:";
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --list;
      '

  kafka:
    image: apache/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    healthcheck:
      test: nc -z kafka 9092 || exit 1
      interval: 10s
      timeout: 10s
      retries: 5

  # redis:
  #   image: redis:latest
  #   command: redis-server --save "" --appendonly no
  #   ports:
  #     - 6379:6379
